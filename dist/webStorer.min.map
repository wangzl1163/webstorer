{"version":3,"sources":["webpack://webStorer/webpack/universalModuleDefinition","webpack://webStorer/webpack/bootstrap","webpack://webStorer/./node_modules/jsstore/dist/npm.export.js","webpack://webStorer/./node_modules/jsstore/dist/jsstore.worker.js","webpack://webStorer/./node_modules/sqlweb/dist/sqlweb.commonjs2.js","webpack://webStorer/./node_modules/jsstore/dist/jsstore.worker.min.js","webpack://webStorer/./node_modules/jsstore/dist/jsstore.commonjs2.min.js","webpack://webStorer/./src/main.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","_parse_sql__WEBPACK_IMPORTED_MODULE_0__","_query__WEBPACK_IMPORTED_MODULE_1__","setup","connection","params","$sql","run","query","result","api","data","Query","parseSql","_util__WEBPACK_IMPORTED_MODULE_0__","isString","query_","Util","_build_parser__WEBPACK_IMPORTED_MODULE_0__","_log_helper__WEBPACK_IMPORTED_MODULE_1__","_enums__WEBPACK_IMPORTED_MODULE_2__","parseJson","JSON","parse","val","test","Date","replace","RegExp","trim","ex","SynTaxError","message","peg$SyntaxError","expected","found","location","this","Error","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","j","descriptions","type","sort","slice","join","describeExpected","describeFound","SyntaxError","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","peg$parsequery","peg$startRuleFunction","peg$c2","peg$literalExpectation","peg$c5","peg$c7","peg$c10","peg$c26","peg$c28","peg$c32","peg$c35","peg$c43","peg$c49","peg$c54","peg$c56","peg$c79","peg$c81","peg$c83","peg$c85","peg$c87","peg$c93","peg$c95","peg$c98","peg$c103","peg$otherExpectation","peg$c104","peg$c105","peg$classExpectation","peg$c106","peg$c114","peg$c115","peg$c116","peg$c117","peg$c119","peg$c121","peg$c123","peg$c125","peg$c126","peg$c127","peg$c128","peg$c129","peg$c130","peg$c134","peg$c135","peg$c136","peg$c138","peg$c139","peg$c140","peg$c141","peg$c142","peg$c143","peg$c145","peg$c146","peg$c147","peg$c148","peg$c149","peg$c150","peg$c151","peg$c152","peg$c153","peg$c154","peg$c155","peg$c156","peg$c157","peg$c158","peg$c159","peg$c160","peg$c161","peg$c162","peg$c163","peg$c164","peg$c165","peg$c166","peg$c167","peg$c168","peg$c169","peg$c170","peg$c171","peg$c172","peg$c173","peg$c174","peg$c175","peg$c176","peg$c177","peg$c178","peg$c179","peg$c180","peg$c181","peg$c182","peg$c183","peg$c184","peg$c185","peg$c186","peg$c187","peg$c188","peg$c189","peg$c190","peg$c191","peg$c192","peg$c193","peg$c194","peg$c197","peg$c198","peg$c199","peg$c200","peg$c201","peg$c203","peg$c204","peg$c205","peg$c206","peg$c207","peg$c208","peg$c209","peg$c210","peg$c211","peg$c212","peg$c213","peg$c214","peg$c215","peg$c216","peg$c217","peg$c218","peg$c219","peg$c220","peg$c221","peg$c222","peg$c223","peg$c224","peg$c225","peg$c226","peg$c227","peg$c228","peg$c229","peg$c230","peg$c231","peg$c232","peg$c234","peg$c235","peg$c236","peg$c237","peg$c238","peg$c239","peg$c240","peg$c241","peg$c242","peg$c243","peg$c244","peg$c245","peg$c246","peg$c247","peg$c248","peg$c249","peg$currPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","start","offset","peg$fail","push","peg$buildStructuredError","s0","s1","s2","s3","s4","s5","s6","s8","s9","s10","s11","s12","s13","s14","s15","peg$parseS","peg$parseE","peg$parseL","peg$parseC","peg$parseT","peg$parseSELECT","peg$parse_","peg$parseasFirstQuery","peg$parseasAfterFirstQuery","first","rest","splice","peg$parsealiasGrammar","peg$parseasQuery","peg$parseaggregateType","peg$parseinBetweenAggregateColumn","peg$parseaggregate","peg$parseaggregateQry","peg$parseFROM","peg$parsetableName","peg$parsejoinQry","peg$parsewhereQry","peg$parseskip","peg$parselimit","peg$parsedistinct","peg$parseorderBy","peg$parsegroupBy","as","aggr","table","where","option","modifiedWhere","forEach","keys","skip","limit","distinct","order","groupBy","joinWithSameTable","find","qry","with","isArray","joinQry","asVal","alias","from","aggregate","peg$c45","peg$parseselectQuery","s7","peg$parseCOUNT","peg$c44","peg$parsecountQuery","peg$parseI","peg$parseN","peg$parseR","peg$parseINSERT","peg$parseO","peg$parseINTO","peg$parseV","peg$parseA","peg$parseU","peg$parseVALUES","peg$parsevalue","peg$parseinsertWithEqual","substr","peg$parsekeyValueSepByColumn","peg$parseinsertWithParanthesisBetweenVal","obj","item","peg$parseinsertWithParanthesis","peg$parsevalueTypes","peg$parseinsertOptions","insertValue","skipDataCheck","return","upsert","into","values","peg$c24","peg$parseinsertQuery","peg$parseP","peg$parseD","peg$parseUPDATE","peg$parseSET","peg$parseequalToItem","peg$parseupdateValueBetweenItem","peg$parseupdateValue","in","set","peg$parseupdateQuery","peg$parseDELETE","peg$parseremoveQuery","peg$parseDEFINE","peg$parseB","peg$parseDB","peg$parsedbName","peg$parsecreateDbQuery","peg$parsecreateTableQuery","tables","db","peg$parsecreateQuery","peg$parseOPENDB","peg$parseopenQuery","peg$parseX","peg$parseISDBEXIST","peg$parseTABLE","peg$parseversion","version","peg$parsetableInfo","tblInfo","dbName","peg$parseisDbExistQuery","s16","s17","peg$parsecolumnDef","peg$parsebetweenColumnDef","all","ver","columns","versionData","peg$c8","peg$parsecolumn","peg$parsecolumnOption","defaultValue","unique","autoIncrement","default","notNull","dataType","primaryKey","multiEntry","enableSearch","peg$c12","peg$parseG","peg$parseSTRING","peg$parseM","peg$parseNUMBER","peg$parseJ","peg$parseOBJECT","peg$parseY","peg$parseARRAY","peg$parseBOOLEAN","peg$parseDATETIME","toLowerCase","peg$parsedataType","peg$parseAUTOINCREMENT","peg$parseautoIncrement","peg$parseNOTNULL","peg$parsenotNull","peg$parseF","peg$parseDEFAULT","peg$parsedefault","charAt","peg$parseQ","peg$parseUNIQUE","peg$parseunique","peg$parseK","peg$parsePRIMARYKEY","peg$parseprimaryKey","peg$parseMULTIENTRY","peg$parsemultiEntry","peg$parseH","peg$parseENABLESEARCH","peg$parseenableSearch","peg$parseDISABLESEARCH","peg$parsedisableSearch","peg$parsecolumnOpts","peg$parseVERSION","peg$parseNumber","peg$parseSKIPDATACHECK","peg$parseskipDataCheck","peg$parseRETURN","peg$parsereturn","peg$parseUPSERT","peg$parseupsert","peg$parseAS","peg$parseMIN","peg$parseinBetweenParanthesisColumn","min","peg$parseminAggregate","peg$parseMAX","max","peg$parsemaxAggregate","peg$parseAVG","avg","peg$parseavgAggregate","count","peg$parsecountAggregate","peg$parseSUM","sum","peg$parsesumAggregate","peg$parseGROUP","peg$parseBY","peg$parsegroupByRestValue","peg$parseORDER","peg$parseorderByQry","peg$parserestOrderByQry","unshift","peg$parseOrderByTypes","peg$parseorderByType","by","peg$parseDISTINCT","peg$parseSKIP","peg$parseLIMIT","peg$parseW","peg$parseWHERE","peg$parsewhereQryWithoutParanthesis","peg$parsewhereQryWithParanthesis","peg$parsejoinWhereItems","item1","item2","pushInItem1","subItem","peg$c72","peg$parsewhereitems","peg$parseJoinOp","op","or","peg$c73","fw","jw","peg$parsewhereItem","peg$parsejoinWhereItem","orKey","peg$c75","peg$parsecolAfterDot","peg$parseLIKE","peg$parseWord","peg$parselikeType1","peg$parselikeType2","peg$parselikeType3","peg$parselikeType","col","colDot","like","peg$parselikeItem","peg$parseIN","peg$parseinBetweenParanthesisItem","betweens","peg$parseinItem","peg$parseoperatorItem","peg$parseBETWEEN","low","high","peg$parsebetweenItem","peg$parseINNER","peg$parseLEFT","peg$parsejoinType","peg$parseJOIN","peg$parseON","peg$parseonValue","on","peg$parseIdentifier","peg$parseAnd","peg$parseOr","peg$parseColumnValue","peg$parseLetter","peg$parseDigit","Number","peg$parseWs","LogHelper","_enums__WEBPACK_IMPORTED_MODULE_0__","_config__WEBPACK_IMPORTED_MODULE_1__","info","info_","getMsg_","log","msg","isLogEnabled","console","logError","error","logWarning","warn","errMsg","ERROR_TYPE","Config","topLevelKeys_","parseSql_","map","stringifiedValue","stringify","parseJson_","e","u","a","b","h","g","WorkerNotSupplied","IndexedDbUndefined","UndefinedColumn","UndefinedValue","UndefinedColumnName","UndefinedDbName","UndefinedColumnValue","NotArray","NoValueSupplied","ColumnNotExist","EnableSearchOff","InvalidOp","NullValue","WrongDataType","TableNotExist","DbNotExist","ConnectionAborted","ConnectionClosed","NotObject","InvalidConfig","DbBlocked","IndexedDbNotSupported","NullValueInWhere","InvalidJoinQuery","InvalidOrderQuery","InvalidQuery","InvalidGroupQuery","ImportScriptsFailed","MethodNotExist","Registered","Failed","NotStarted","String","Boolean","Null","DateTime","InitDb","IsDbExist","GetDbVersion","GetDbList","Get","Set","Select","Insert","Update","Remove","GetDbSchema","OpenDb","Clear","DropDb","Count","ChangeLogStatus","Terminate","Transaction","InitKeyStore","CloseDb","Union","Intersect","ImportScripts","RequestQueueEmpty","RequestQueueFilled","Where","Like","Regex","In","Equal","Between","GreaterThan","LessThan","GreaterThanEqualTo","LessThanEqualTo","NotEqualTo","Aggregate","Max","Min","Avg","Sum","Or","Skip","Limit","And","IgnoreCase","Then","ReadOnly","ReadWrite","First","Last","Any","Connected","Closed","UnableToStart","ClosedByJsStore","isRuningInWorker","f","_info","getMsg","throw","_","isDbOpened_","isDbIdle_","requestQueue_","isCodeExecuting_","inactivityTimer_","eventQueue","middlewares","whiteListApi_","worker_","onmessage","onMessageFromWorker_","initKeyStore_","prcoessExecutionOfQry_","onSuccess","onError","JsStoreWorker","KeyStore","init","processFinishedQuery_","shift","errorOccured","errorDetails","terminate","openDb_","callEvent","returnedValue","executeQry_","activeDbName","executeMiddleware_","Promise","pushApi","then","clearTimeout","catch","sendRequestToWorker_","findIndex","indexOf","setTimeout","postMessage","QueryExecutor","checkConnectionAndExecuteLogic","filter","event","callback","apply","y","setPrototypeOf","__proto__","openDb","initDb","dropDb","select","insert","update","remove","clear","setLogStatus","getDbVersion","isDbExist","getDbList","getDbSchema","transaction","off","union","intersect","addPlugin","addMiddleware","importScripts","arguments","originalInsert","originalUpdate","originalRemove","originalSelect","workerPath","require","connect","JsStore","Worker","process","SqlWeb","createDb","createDbSchema","createTable","paging","resolve","reject","tableSchemaList","tm","_id","dbSchema","database","tableSchema","newConnection","tableName","noOfDataInserted","expression","rowsUpdated","rowsDeleted","results","pageIndex","pageSize","runSql","sqlExpression","getParameterizedSqlExpression","parameters","entries","param","runParameterizedSql"],"mappings":"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","file":"webStorer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"webStorer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"webStorer\"] = factory();\n\telse\n\t\troot[\"webStorer\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"zUnb\");\n","if (process.env.NODE_ENV === 'production') {\n    module.exports = require('./jsstore.commonjs2.min.js');\n}\nelse {\n    module.exports = require('./jsstore.commonjs2.js');\n}\n","export default __webpack_public_path__ + \"scripts/jsstore.worker.34bb91b2583e52050d1bdd5623de6b22.js\";","/*!\n * @license :sqlweb - V1.5.0 - 01/11/2020\n * https://github.com/ujjwalguptaofficial/sqlweb\n * Copyright (c) 2020 @Ujjwal Gupta; Licensed MIT\n */\nmodule.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _parse_sql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);\n\n\n// tslint:disable-next-line\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    setup: function (connection, params) {\n        connection.$sql = {\n            run: function (query) {\n                var result = Object(_parse_sql__WEBPACK_IMPORTED_MODULE_0__[\"parseSql\"])(query);\n                return connection[result.api](result.data);\n            },\n            Query: _query__WEBPACK_IMPORTED_MODULE_1__[\"Query\"]\n        };\n    }\n});\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseSql\", function() { return parseSql; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\n\nvar parseSql = function (query) {\n    var result;\n    if (_util__WEBPACK_IMPORTED_MODULE_0__[\"Util\"].isString(query) === true) {\n        result = _util__WEBPACK_IMPORTED_MODULE_0__[\"Util\"].parseSql(query);\n    }\n    else {\n        result = query.query_;\n    }\n    return result;\n};\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Util\", function() { return Util; });\n/* harmony import */ var _build_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var _build_parser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_build_parser__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _log_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);\n/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);\n\n\n\nvar Util = /** @class */ (function () {\n    function Util() {\n    }\n    Util.isString = function (value) {\n        return typeof value === 'string';\n    };\n    Util.parseJson = function (value) {\n        var reviver = function (key, val) {\n            var dateFormat = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\n            if (typeof val === \"string\" && dateFormat.test(val)) {\n                return new Date(val);\n            }\n            return val;\n        };\n        return JSON.parse(value, reviver);\n    };\n    Util.parseSql = function (query) {\n        try {\n            query = query.replace(new RegExp('\\n', 'g'), '').trim();\n            return _build_parser__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](query);\n        }\n        catch (ex) {\n            var err = new _log_helper__WEBPACK_IMPORTED_MODULE_1__[\"LogHelper\"](_enums__WEBPACK_IMPORTED_MODULE_2__[\"ERROR_TYPE\"].SynTaxError, ex.message).get();\n            throw err;\n        }\n    };\n    return Util;\n}());\n\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { query: peg$parsequery },\n      peg$startRuleFunction  = peg$parsequery,\n\n      peg$c0 = function(db, tables) {\n      \tdb.tables=tables\n           return {\n              api:'initDb',\n              data:db\n          }\n      },\n      peg$c1 = \";\",\n      peg$c2 = peg$literalExpectation(\";\", false),\n      peg$c3 = function(name) {\n      \treturn {\n          \tname:name\n          }\n      },\n      peg$c4 = \"(\",\n      peg$c5 = peg$literalExpectation(\"(\", false),\n      peg$c6 = \")\",\n      peg$c7 = peg$literalExpectation(\")\", false),\n      peg$c8 = function(table, first, all, ver) {\n          all.push(first);\n          var columns = {};\n          all.forEach(function(column){\n              columns = {...columns,...column}\n          });\n          var versionData = ver==null?null:ver['version'];\n          return {\n              name: table,\n              columns : columns,\n              version: versionData\n          }\n      },\n      peg$c9 = \",\",\n      peg$c10 = peg$literalExpectation(\",\", false),\n      peg$c11 = function(def) {\n          return def;\n      },\n      peg$c12 = function(name, options) {\n          var defaultValue = {\n              unique:false,\n              autoIncrement:false,\n              default:null,\n              notNull:false,\n              dataType:null,\n              primaryKey:false,\n              multiEntry:false,\n              enableSearch:true\n          }\n          options.forEach(option=>{\n              var key = Object.keys(option)[0];\n              defaultValue[key] = option[key];\n          });\n          return {\n              [name]: defaultValue\n          };\n      },\n      peg$c13 = function(option) {\n      \treturn option;\n      },\n      peg$c14 = function() {\n          return {\n              autoIncrement:true\n          }\n      },\n      peg$c15 = function() {\n          return {\n              notNull:true\n          }\n      },\n      peg$c16 = function(val) {\n          return {\n              default:val\n          }\n      },\n      peg$c17 = function(type) {\n          return {\n              dataType:type.join('').toLowerCase()\n          }\n      },\n      peg$c18 = function() {\n          return {\n              unique:true\n          }\n      },\n      peg$c19 = function() {\n          return {\n              primaryKey:true\n          }\n      },\n      peg$c20 = function() {\n          return {\n              multiEntry:true\n          }\n      },\n      peg$c21 = function() {\n          return {\n              enableSearch:true\n          }\n      },\n      peg$c22 = function() {\n          return {\n              enableSearch:false\n          }\n      },\n      peg$c23 = function(val) {\n          return {\n              version:val\n          }\n      },\n      peg$c24 = function(table, insertValue, options) {\n           let option = {};\n           options.forEach(val=>{\n                  var key = Object.keys(val)[0];\n                  switch(key){\n                      case 'skipDataCheck':\n                          option.skipDataCheck = val[key]; break;\n                      case 'return':\n                          option.return = val[key]; break;\n                      case 'upsert':\n                          option.upsert = val[key]; break;\n                  }\n           });\n           return {\n              api: 'insert',\n              data: {\n                  into: table,\n                  values: insertValue,\n                  ...option\n              }\n           }\n      },\n      peg$c25 = \"({\",\n      peg$c26 = peg$literalExpectation(\"({\", false),\n      peg$c27 = \"})\",\n      peg$c28 = peg$literalExpectation(\"})\", false),\n      peg$c29 = function(first, rest) {\n      \tvar obj = {\n          \t[first.key]: first.value\n          }\n          if(rest!=null){\n          \trest.forEach(item=>{\n              \tobj[item.key] = item.value\n              })\n          }\n          return [obj];\n      },\n      peg$c30 = function(val) {\n      \treturn val;\n      },\n      peg$c31 = \":\",\n      peg$c32 = peg$literalExpectation(\":\", false),\n      peg$c33 = function(key, val) {\n      \treturn {\n          \tkey:key,\n              value:val\n          }\n      },\n      peg$c34 = \"=\",\n      peg$c35 = peg$literalExpectation(\"=\", false),\n      peg$c36 = function(insertValue) {\n      \treturn insertValue;\n      },\n      peg$c37 = function(option) {\n          return {\n              [option]:true\n          }\n      },\n      peg$c38 = function() {\n          return 'skipDataCheck';\n      },\n      peg$c39 = function() {\n          return 'return';\n      },\n      peg$c40 = function() {\n          return 'upsert';\n      },\n      peg$c41 = function(table, where) {\n        return {\n           api:'remove',\n           data:{\n              from:table,\n              where:where,\n           }\n        }\n      },\n      peg$c42 = \"*\",\n      peg$c43 = peg$literalExpectation(\"*\", false),\n      peg$c44 = function(table, where, options) {\n        const option = {};\n        options.forEach(val=>{\n        \tvar key = Object.keys(val)[0];\n          switch(key){\n              case 'distinct':\n              \toption.distinct = val[key]; break;\n               case 'groupBy':\n              \toption.groupBy = val[key]; break;\n          }\n        });\n        return {\n           api:'count',\n           data:{\n              from:table,\n              where:where,\n              ...option\n           }\n        }\n      },\n      peg$c45 = function(as, aggr, table, join, where, options) {\n        const option = {};\n        options.forEach(val=>{\n        \tvar key = Object.keys(val)[0];\n          switch(key){\n          \tcase 'skip':\n               \toption.skip= val[key]; break;\n              case 'limit':\n                  option.limit= val[key]; break;\n              case 'distinct':\n              \toption.distinct = val[key]; break;\n              case 'order':\n              \toption.order = val[key]; break;\n               case 'groupBy':\n              \toption.groupBy = val[key]; break;\n          }\n        });\n        let modifiedWhere ;\n        if(where!=null){\n          modifiedWhere = [];\n          where.forEach(value=>{\n            if(value.table){\n                var joinWithSameTable = join.find(qry=>qry.with===value.table);\n                if(joinWithSameTable!=null){\n                  if(Array.isArray(joinWithSameTable.where)){\n                    joinWithSameTable.where.push(value.query)\n                  }\n                  else {\n                    joinWithSameTable.where = [value.query];\n                  }\n                }\n            }\n            else{\n                modifiedWhere.push(value);\n            }\n          });\n          if(modifiedWhere.length===0){\n              modifiedWhere = null;\n          }\n        }\n        if(as!=null){\n            as.forEach(value=>{\n                const joinQry = join.find(qry=> qry.with===value.table);\n                if(joinQry!=null){\n                      const asVal = {\n                          [value.column]: value.alias   \n                      }\n                      if(joinQry.as ==null){\n                          joinQry.as = asVal;\n                      }\n                      else{\n                          joinQry.as = {...asVal, ...joinQry.as}\n                      }\n                }\n            })\n        }\n        return {\n           api:'select',\n           data:{\n              from:table,\n              where:modifiedWhere,\n              ...option,\n              aggregate : aggr,\n              join:join.length===0?null:join\n           }\n        }\n      },\n      peg$c46 = function(alias) {\n         return alias;\n      },\n      peg$c47 = function(first, rest) {\n        rest.splice(0,0,first);\n        return rest;\n      },\n      peg$c48 = \".\",\n      peg$c49 = peg$literalExpectation(\".\", false),\n      peg$c50 = function(tableName, columnName, alias) {\n       return {\n          table: tableName,\n          column: columnName,\n          alias: alias\n       }\n      },\n      peg$c51 = function(as) {\n        return as;\n      },\n      peg$c52 = function(aggr) {\n      \treturn aggr[0];\n      },\n      peg$c53 = \"[\",\n      peg$c54 = peg$literalExpectation(\"[\", false),\n      peg$c55 = \"]\",\n      peg$c56 = peg$literalExpectation(\"]\", false),\n      peg$c57 = function(first, rest) {\n      \trest.splice(0,0,first);\n          return rest;\n      },\n      peg$c58 = function(first, rest) {\n      \trest.splice(0,0,first);\n          return {\n          \tmax : rest\n          }\n      },\n      peg$c59 = function(first, rest) {\n      \trest.splice(0,0,first);\n          return {\n          \tmin : rest\n          }\n      },\n      peg$c60 = function(first, rest) {\n      \trest.splice(0,0,first);\n          return {\n          \tavg : rest\n          }\n      },\n      peg$c61 = function(first, rest) {\n      \trest.splice(0,0,first);\n          return {\n          \tcount : rest\n          }\n      },\n      peg$c62 = function(first, rest) {\n      \trest.splice(0,0,first);\n          return {\n          \tsum : rest\n          }\n      },\n      peg$c63 = function(first, rest) {\n      \treturn {\n          \tgroupBy:[first,...rest]\n          } ;\n      },\n      peg$c64 = function(value, rest) {\n          rest.unshift(value);\n          return {\n            order: rest\n          };\n      },\n      peg$c65 = function(qry) {\n      \treturn qry;\n      },\n      peg$c66 = function(by, type) {\n      \treturn {\n              by:by,\n              type: type\n          }\n      },\n      peg$c67 = function(type) {\n      \treturn type;\n      },\n      peg$c68 = function() {\n      \treturn {\n          \tdistinct: true\n          };\n      },\n      peg$c69 = function(val) {\n      \treturn {\n          \tskip: val\n          };\n      },\n      peg$c70 = function(val) {\n      \treturn {\n          \tlimit: val\n          };\n      },\n      peg$c71 = function(where) {\n      \treturn where;\n      },\n      peg$c72 = function(item1, item2) {\n      \tif(!Array.isArray(item1)){\n          \titem1=[item1];\n          }\n          if(item2!=null){\n          \tvar pushInItem1=(item)=>{\n               \titem1.push(item);\n              }\n              if(Array.isArray(item1)){\n              \titem2.forEach(item=>{\n                    if(Array.isArray(item)){\n                      item.forEach(subItem=>{\n                          pushInItem1(subItem);\n                      });\n                    }\n                    else{\n                        pushInItem1(item)\n                    }\n                });\n              }\n          }\n          return item1;\n      },\n      peg$c73 = function(op, where) {\n      \t\n          if(op==='||'){\n          \tvar obj={};\n              if(Array.isArray(where)){\n                where.forEach(val=>{\n                    obj={...obj,...val}\n                });\n              }\n              else{\n              \tobj = where;\n              }\n              return {\n              \tor:obj\n              }\n          }\n         \n          return where;\n      },\n      peg$c74 = function(fw, jw) {\n      \tif(jw==null){\n          \treturn fw\n          }\n          else{\n           \tjw.splice(0,0,fw);\t\n              return jw;\n          }\n      },\n      peg$c75 = function(fw, jw) {\n      \tif(jw==null){\n          \treturn fw;\n          }\n          else{\n          \tvar query= fw;\n              jw.forEach(qry=>{\n              \tvar key = Object.keys(qry)[0];\n              \tif(key==='or'){\n                  \tif(query.or==null){\n                      \tquery.or={};\n                      }\n                      var orKey = Object.keys(qry[key])[0];\n                      query.or[orKey]= qry[key][orKey];\n                  }\n                  else{\n                  \tquery[key]=qry[key];\n                  }\n              })\n              return query;\n          }\n      },\n      peg$c76 = function(op, item) {\n      \tif(op==='&&'){\n              return item;\n          }\n          else if(item.table){\n              item.query = {\n                  or: item.query\n              }\n              return item;\n          }\n          return {\n              or: item\n          }\n      },\n      peg$c77 = function(col, colDot, val) { \n      \tif(colDot==null){\n            return {\n                [col]:val\n            }\n          }\n          return {\n                table : col,\n                query: {\n                \t[colDot]:val\n                }\n          }\n      },\n      peg$c78 = \"!=\",\n      peg$c79 = peg$literalExpectation(\"!=\", false),\n      peg$c80 = \">=\",\n      peg$c81 = peg$literalExpectation(\">=\", false),\n      peg$c82 = \"<=\",\n      peg$c83 = peg$literalExpectation(\"<=\", false),\n      peg$c84 = \">\",\n      peg$c85 = peg$literalExpectation(\">\", false),\n      peg$c86 = \"<\",\n      peg$c87 = peg$literalExpectation(\"<\", false),\n      peg$c88 = function(col, colDot, op, val) { \n      \tif(colDot==null){\n              return {\n                      [col]:{\n                          [op]:val\n                      }\n                  }\n          }\n          return {\n              table : col,\n              query:{\n                  [colDot]:{\n                      [op]:val\n                  }\n              }\n      \t}\n      },\n      peg$c89 = function(col, colDot, low, high) {\n      \tif(colDot==null){\n              return {\n                      [col]:{\n                          '-':{\n                              low : low,\n                              high : high\n                          }\n                      }\n              }\n          }\n          return {\n              table : col,\n              query:{\n                  [colDot]:{\n                      '-':{\n                          low : low,\n                          high : high\n                      }\n                  }\n              }\n          }\n          \n      },\n      peg$c90 = function(col, colDot, first, betweens) { \n      \tif(colDot==null){\n              return {\n                  [col]:{\n                      in:[first,...betweens]\n                  }\n              }\n          }\n          return {\n              table:col,\n              query:{\n                  [colDot]:{\n                      in:[first,...betweens]\n                  }\n              }\n      \t}\n      },\n      peg$c91 = function(col, colDot, val) { \n      \tif(colDot==null){\n              return {\n                  [col]:{\n                      like:val\n                  }\n              }\n          }\n          return {\n              table:col,\n              query:{\n                  [colDot]:{\n                      like:val\n                  }\n              }\n      \t}\n          \n      },\n      peg$c92 = \"'%\",\n      peg$c93 = peg$literalExpectation(\"'%\", false),\n      peg$c94 = \"%'\",\n      peg$c95 = peg$literalExpectation(\"%'\", false),\n      peg$c96 = function(val) {\n      \treturn \"%\"+val+\"%\";\n      },\n      peg$c97 = \"'\",\n      peg$c98 = peg$literalExpectation(\"'\", false),\n      peg$c99 = function(val) {\n        return \"%\"+ val;\n      },\n      peg$c100 = function(val) {\n      \treturn val+\"%\";\n      },\n      peg$c101 = function(col) {\n         return col;\n      },\n      peg$c102 = function(type, table, onValue1, onValue2) {\n        return  {\n         with: table,\n         on: `${onValue1}=${onValue2}`,\n         type: type\n        }\n      },\n      peg$c103 = peg$otherExpectation(\"on value\"),\n      peg$c104 = /^[a-zA-Z_.]/,\n      peg$c105 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"_\", \".\"], false, false),\n      peg$c106 = function(val) {\n      \treturn val.join(\"\");\n      },\n      peg$c107 = function(type) {\n         return type==null?null : type.join('');\n      },\n      peg$c108 = function(table, set, where) {\n       return {\n           api:'update',\n           data:{\n              in:table,\n              set:set,\n              where:where\n           }\n        }\n      },\n      peg$c109 = function(first, rest) {\n          rest.forEach(val=>{\n              first = {...first,...val}; \n          });\n          return first;\n      },\n      peg$c110 = function(val) {\n          return val;\n      },\n      peg$c111 = function(name) {\n          return {\n              api:'openDb',\n              data:name\n          }\n      },\n      peg$c112 = function(name, tblInfo) {\n      \tvar result = {\n           \tapi:'isDbExist'\n          }\n          if(tblInfo==null){\n            result.data=name;\n          }\n          else{\n          \tresult.data={\n                  dbName:name,\n                  table:tblInfo\n              }\n          }\n          return result;\n      },\n      peg$c113 = function(table, ver) {\n      \treturn {\n                      name:table,\n                      version:ver\n                      }\n      },\n      peg$c114 = peg$otherExpectation(\"table name\"),\n      peg$c115 = peg$otherExpectation(\"database name\"),\n      peg$c116 = peg$otherExpectation(\"column\"),\n      peg$c117 = peg$otherExpectation(\"order type\"),\n      peg$c118 = \"asc\",\n      peg$c119 = peg$literalExpectation(\"asc\", false),\n      peg$c120 = \"desc\",\n      peg$c121 = peg$literalExpectation(\"desc\", false),\n      peg$c122 = \"&&\",\n      peg$c123 = peg$literalExpectation(\"&&\", false),\n      peg$c124 = \"||\",\n      peg$c125 = peg$literalExpectation(\"||\", false),\n      peg$c126 = peg$otherExpectation(\"column value\"),\n      peg$c127 = peg$otherExpectation(\"identifier\"),\n      peg$c128 = /^[a-zA-Z0-9_]/,\n      peg$c129 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c130 = peg$otherExpectation(\"word\"),\n      peg$c131 = function(l) {return l.join(\"\");},\n      peg$c132 = /^[a-zA-Z0-9]/,\n      peg$c133 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"]], false, false),\n      peg$c134 = /^[^'%]/,\n      peg$c135 = peg$classExpectation([\"'\", \"%\"], true, false),\n      peg$c136 = peg$otherExpectation(\"number\"),\n      peg$c137 = function(d) {return Number(d.join(\"\"))},\n      peg$c138 = /^[0-9]/,\n      peg$c139 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c140 = peg$otherExpectation(\"Whitespace\"),\n      peg$c141 = /^[ \\t]/,\n      peg$c142 = peg$classExpectation([\" \", \"\\t\"], false, false),\n      peg$c143 = peg$otherExpectation(\"One or more whitespaces\"),\n      peg$c144 = function(space) {return null;},\n      peg$c145 = /^[aA]/,\n      peg$c146 = peg$classExpectation([\"a\", \"A\"], false, false),\n      peg$c147 = /^[bB]/,\n      peg$c148 = peg$classExpectation([\"b\", \"B\"], false, false),\n      peg$c149 = /^[cC]/,\n      peg$c150 = peg$classExpectation([\"c\", \"C\"], false, false),\n      peg$c151 = /^[dD]/,\n      peg$c152 = peg$classExpectation([\"d\", \"D\"], false, false),\n      peg$c153 = /^[eE]/,\n      peg$c154 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c155 = /^[fF]/,\n      peg$c156 = peg$classExpectation([\"f\", \"F\"], false, false),\n      peg$c157 = /^[gG]/,\n      peg$c158 = peg$classExpectation([\"g\", \"G\"], false, false),\n      peg$c159 = /^[hH]/,\n      peg$c160 = peg$classExpectation([\"h\", \"H\"], false, false),\n      peg$c161 = /^[iI]/,\n      peg$c162 = peg$classExpectation([\"i\", \"I\"], false, false),\n      peg$c163 = /^[jJ]/,\n      peg$c164 = peg$classExpectation([\"j\", \"J\"], false, false),\n      peg$c165 = /^[kK]/,\n      peg$c166 = peg$classExpectation([\"k\", \"K\"], false, false),\n      peg$c167 = /^[lL]/,\n      peg$c168 = peg$classExpectation([\"l\", \"L\"], false, false),\n      peg$c169 = /^[mM]/,\n      peg$c170 = peg$classExpectation([\"m\", \"M\"], false, false),\n      peg$c171 = /^[nN]/,\n      peg$c172 = peg$classExpectation([\"n\", \"N\"], false, false),\n      peg$c173 = /^[oO]/,\n      peg$c174 = peg$classExpectation([\"o\", \"O\"], false, false),\n      peg$c175 = /^[pP]/,\n      peg$c176 = peg$classExpectation([\"p\", \"P\"], false, false),\n      peg$c177 = /^[qQ]/,\n      peg$c178 = peg$classExpectation([\"q\", \"Q\"], false, false),\n      peg$c179 = /^[rR]/,\n      peg$c180 = peg$classExpectation([\"r\", \"R\"], false, false),\n      peg$c181 = /^[sS]/,\n      peg$c182 = peg$classExpectation([\"s\", \"S\"], false, false),\n      peg$c183 = /^[tT]/,\n      peg$c184 = peg$classExpectation([\"t\", \"T\"], false, false),\n      peg$c185 = /^[uU]/,\n      peg$c186 = peg$classExpectation([\"u\", \"U\"], false, false),\n      peg$c187 = /^[vV]/,\n      peg$c188 = peg$classExpectation([\"v\", \"V\"], false, false),\n      peg$c189 = /^[wW]/,\n      peg$c190 = peg$classExpectation([\"w\", \"W\"], false, false),\n      peg$c191 = /^[xX]/,\n      peg$c192 = peg$classExpectation([\"x\", \"X\"], false, false),\n      peg$c193 = /^[yY]/,\n      peg$c194 = peg$classExpectation([\"y\", \"Y\"], false, false),\n      peg$c195 = /^[zZ]/,\n      peg$c196 = peg$classExpectation([\"z\", \"Z\"], false, false),\n      peg$c197 = peg$otherExpectation(\"min\"),\n      peg$c198 = peg$otherExpectation(\"max\"),\n      peg$c199 = peg$otherExpectation(\"avg\"),\n      peg$c200 = peg$otherExpectation(\"count\"),\n      peg$c201 = peg$otherExpectation(\"sum\"),\n      peg$c202 = peg$otherExpectation(\"aggregate\"),\n      peg$c203 = peg$otherExpectation(\"between\"),\n      peg$c204 = peg$otherExpectation(\"in\"),\n      peg$c205 = peg$otherExpectation(\"like\"),\n      peg$c206 = peg$otherExpectation(\"select\"),\n      peg$c207 = peg$otherExpectation(\"distinct\"),\n      peg$c208 = peg$otherExpectation(\"order\"),\n      peg$c209 = peg$otherExpectation(\"by\"),\n      peg$c210 = peg$otherExpectation(\"from\"),\n      peg$c211 = peg$otherExpectation(\"group\"),\n      peg$c212 = peg$otherExpectation(\"limit\"),\n      peg$c213 = peg$otherExpectation(\"skip\"),\n      peg$c214 = peg$otherExpectation(\"where\"),\n      peg$c215 = peg$otherExpectation(\"insert\"),\n      peg$c216 = peg$otherExpectation(\"into\"),\n      peg$c217 = peg$otherExpectation(\"return\"),\n      peg$c218 = peg$otherExpectation(\"values\"),\n      peg$c219 = peg$otherExpectation(\"skipdatacheck\"),\n      peg$c220 = peg$otherExpectation(\"update\"),\n      peg$c221 = peg$otherExpectation(\"set\"),\n      peg$c222 = peg$otherExpectation(\"delete\"),\n      peg$c223 = peg$otherExpectation(\"version\"),\n      peg$c224 = peg$otherExpectation(\"enablesearch\"),\n      peg$c225 = peg$otherExpectation(\"multiEntry\"),\n      peg$c226 = peg$otherExpectation(\"primarykey\"),\n      peg$c227 = peg$otherExpectation(\"unique\"),\n      peg$c228 = peg$otherExpectation(\"string\"),\n      peg$c229 = peg$otherExpectation(\"object\"),\n      peg$c230 = peg$otherExpectation(\"array\"),\n      peg$c231 = peg$otherExpectation(\"boolean\"),\n      peg$c232 = peg$otherExpectation(\"date_time\"),\n      peg$c233 = \"_\",\n      peg$c234 = peg$literalExpectation(\"_\", false),\n      peg$c235 = peg$otherExpectation(\"autoincrement\"),\n      peg$c236 = peg$otherExpectation(\"notnull\"),\n      peg$c237 = peg$otherExpectation(\"default\"),\n      peg$c238 = peg$otherExpectation(\"define\"),\n      peg$c239 = peg$otherExpectation(\"table\"),\n      peg$c240 = peg$otherExpectation(\"db\"),\n      peg$c241 = peg$otherExpectation(\"isDbExist\"),\n      peg$c242 = peg$otherExpectation(\"openDb\"),\n      peg$c243 = peg$otherExpectation(\"disablesearch\"),\n      peg$c244 = peg$otherExpectation(\"join\"),\n      peg$c245 = peg$otherExpectation(\"on\"),\n      peg$c246 = peg$otherExpectation(\"inner\"),\n      peg$c247 = peg$otherExpectation(\"left\"),\n      peg$c248 = peg$otherExpectation(\"as\"),\n      peg$c249 = peg$otherExpectation(\"upsert\"),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsequery() {\n    var s0;\n\n    s0 = peg$parseselectQuery();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecountQuery();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseinsertQuery();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseupdateQuery();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseremoveQuery();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsecreateQuery();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseopenQuery();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseisDbExistQuery();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreateQuery() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecreateDbQuery();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecreateTableQuery();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecreateTableQuery();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreateDbQuery() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseDEFINE();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDB();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedbName();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 59) {\n                s6 = peg$c1;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c2); }\n              }\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c3(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreateTableQuery() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;\n\n    s0 = peg$currPos;\n    s1 = peg$parseDEFINE();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseTABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetableName();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parse_();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parse_();\n              }\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 40) {\n                  s7 = peg$c4;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c5); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = [];\n                  s9 = peg$parse_();\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n                    s9 = peg$parse_();\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecolumnDef();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$parsebetweenColumnDef();\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$parsebetweenColumnDef();\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = [];\n                        s12 = peg$parse_();\n                        while (s12 !== peg$FAILED) {\n                          s11.push(s12);\n                          s12 = peg$parse_();\n                        }\n                        if (s11 !== peg$FAILED) {\n                          if (input.charCodeAt(peg$currPos) === 41) {\n                            s12 = peg$c6;\n                            peg$currPos++;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = [];\n                            s14 = peg$parse_();\n                            while (s14 !== peg$FAILED) {\n                              s13.push(s14);\n                              s14 = peg$parse_();\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parseversion();\n                              if (s14 === peg$FAILED) {\n                                s14 = null;\n                              }\n                              if (s14 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 59) {\n                                  s15 = peg$c1;\n                                  peg$currPos++;\n                                } else {\n                                  s15 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c2); }\n                                }\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = [];\n                                  s17 = peg$parse_();\n                                  while (s17 !== peg$FAILED) {\n                                    s16.push(s17);\n                                    s17 = peg$parse_();\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c8(s5, s9, s10, s14);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetweenColumnDef() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parse_();\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$parse_();\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 44) {\n        s2 = peg$c9;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c10); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parse_();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parse_();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsecolumnDef();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c11(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumnDef() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsecolumnOption();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsecolumnOption();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c12(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumnOption() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumnOpts();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c13(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumnOpts() {\n    var s0;\n\n    s0 = peg$parsedataType();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseautoIncrement();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsenotNull();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsedefault();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseunique();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseprimaryKey();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsemultiEntry();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseenableSearch();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parsedisableSearch();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseautoIncrement() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseAUTOINCREMENT();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c14();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenotNull() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseNOTNULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c15();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedefault() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseDEFAULT();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsevalue();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c16(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedataType() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSTRING();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseNUMBER();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseOBJECT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseARRAY();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseBOOLEAN();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseDATETIME();\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c17(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseunique() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseUNIQUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c18();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseprimaryKey() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsePRIMARYKEY();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c19();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsemultiEntry() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseMULTIENTRY();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c20();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseenableSearch() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseENABLESEARCH();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c21();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedisableSearch() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseDISABLESEARCH();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c22();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseversion() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseVERSION();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseNumber();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c23(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsertQuery() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parseINSERT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseINTO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetableName();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parse_();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parse_();\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseVALUES();\n                if (s7 !== peg$FAILED) {\n                  s8 = [];\n                  s9 = peg$parse_();\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n                    s9 = peg$parse_();\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsevalueTypes();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$parse_();\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$parse_();\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = [];\n                        s12 = peg$parseinsertOptions();\n                        while (s12 !== peg$FAILED) {\n                          s11.push(s12);\n                          s12 = peg$parseinsertOptions();\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c24(s5, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalueTypes() {\n    var s0;\n\n    s0 = peg$parseinsertWithEqual();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseinsertWithParanthesis();\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsertWithParanthesis() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c25) {\n      s1 = peg$c25;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c26); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsekeyValueSepByColumn();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parseinsertWithParanthesisBetweenVal();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parseinsertWithParanthesisBetweenVal();\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parse_();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parse_();\n              }\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c27) {\n                  s7 = peg$c27;\n                  peg$currPos += 2;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c29(s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsertWithParanthesisBetweenVal() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s1 = peg$c9;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c10); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsekeyValueSepByColumn();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c30(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsekeyValueSepByColumn() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 58) {\n          s3 = peg$c31;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c32); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsevalue();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c33(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsertWithEqual() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 61) {\n      s1 = peg$c34;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c35); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsevalue();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c36(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsertOptions() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseskipDataCheck();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsereturn();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseupsert();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c37(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseskipDataCheck() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSKIPDATACHECK();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c38();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsereturn() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseRETURN();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c39();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseupsert() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseUPSERT();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c40();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseremoveQuery() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseDELETE();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseFROM();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetableName();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parse_();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parse_();\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewhereQry();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = [];\n                  s9 = peg$parse_();\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n                    s9 = peg$parse_();\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c41(s5, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecountQuery() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseCOUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 42) {\n          s4 = peg$c42;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c43); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseFROM();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsetableName();\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parse_();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parse_();\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsewhereQry();\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = [];\n                    s10 = peg$parse_();\n                    while (s10 !== peg$FAILED) {\n                      s9.push(s10);\n                      s10 = peg$parse_();\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$parsedistinct();\n                      if (s11 === peg$FAILED) {\n                        s11 = peg$parsegroupBy();\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$parsedistinct();\n                        if (s11 === peg$FAILED) {\n                          s11 = peg$parsegroupBy();\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c44(s6, s8, s10);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselectQuery() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSELECT();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parse_();\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 42) {\n          s4 = peg$c42;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c43); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parse_();\n          if (s6 !== peg$FAILED) {\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parse_();\n            }\n          } else {\n            s5 = peg$FAILED;\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseasQuery();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseaggregateQry();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseFROM();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsetableName();\n                  if (s8 !== peg$FAILED) {\n                    s9 = [];\n                    s10 = peg$parse_();\n                    while (s10 !== peg$FAILED) {\n                      s9.push(s10);\n                      s10 = peg$parse_();\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$parsejoinQry();\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$parsejoinQry();\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = [];\n                        s12 = peg$parse_();\n                        while (s12 !== peg$FAILED) {\n                          s11.push(s12);\n                          s12 = peg$parse_();\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsewhereQry();\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = [];\n                            s14 = peg$parse_();\n                            while (s14 !== peg$FAILED) {\n                              s13.push(s14);\n                              s14 = peg$parse_();\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = [];\n                              s15 = peg$parseskip();\n                              if (s15 === peg$FAILED) {\n                                s15 = peg$parselimit();\n                                if (s15 === peg$FAILED) {\n                                  s15 = peg$parsedistinct();\n                                  if (s15 === peg$FAILED) {\n                                    s15 = peg$parseorderBy();\n                                    if (s15 === peg$FAILED) {\n                                      s15 = peg$parsegroupBy();\n                                    }\n                                  }\n                                }\n                              }\n                              while (s15 !== peg$FAILED) {\n                                s14.push(s15);\n                                s15 = peg$parseskip();\n                                if (s15 === peg$FAILED) {\n                                  s15 = peg$parselimit();\n                                  if (s15 === peg$FAILED) {\n                                    s15 = peg$parsedistinct();\n                                    if (s15 === peg$FAILED) {\n                                      s15 = peg$parseorderBy();\n                                      if (s15 === peg$FAILED) {\n                                        s15 = peg$parsegroupBy();\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                              if (s14 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c45(s4, s5, s8, s10, s12, s14);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseasQuery() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsealiasGrammar();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parse_();\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c46(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealiasGrammar() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseasFirstQuery();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseasAfterFirstQuery();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseasAfterFirstQuery();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c47(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseasFirstQuery() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s2 = peg$c48;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c49); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$parse_();\n            }\n          } else {\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseAS();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parse_();\n              if (s7 !== peg$FAILED) {\n                while (s7 !== peg$FAILED) {\n                  s6.push(s7);\n                  s7 = peg$parse_();\n                }\n              } else {\n                s6 = peg$FAILED;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c50(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseasAfterFirstQuery() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parse_();\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$parse_();\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 44) {\n        s2 = peg$c9;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c10); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parse_();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parse_();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseasFirstQuery();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c51(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggregateQry() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseaggregate();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c52(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggregate() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c53;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c54); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseaggregateType();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parse_();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parse_();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parseinBetweenAggregateColumn();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parseinBetweenAggregateColumn();\n          }\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s5 = peg$c55;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c56); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c57(s2, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinBetweenAggregateColumn() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s1 = peg$c9;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c10); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseaggregateType();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c30(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggregateType() {\n    var s0;\n\n    s0 = peg$parseminAggregate();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsemaxAggregate();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseavgAggregate();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecountAggregate();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsesumAggregate();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemaxAggregate() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseMAX();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parse_();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parse_();\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parseinBetweenParanthesisColumn();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parseinBetweenParanthesisColumn();\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = [];\n                  s9 = peg$parse_();\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n                    s9 = peg$parse_();\n                  }\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 41) {\n                      s9 = peg$c6;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c58(s5, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseminAggregate() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseMIN();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parse_();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parse_();\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parseinBetweenParanthesisColumn();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parseinBetweenParanthesisColumn();\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = [];\n                  s9 = peg$parse_();\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n                    s9 = peg$parse_();\n                  }\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 41) {\n                      s9 = peg$c6;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c59(s5, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseavgAggregate() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseAVG();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parse_();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parse_();\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parseinBetweenParanthesisColumn();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parseinBetweenParanthesisColumn();\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = [];\n                  s9 = peg$parse_();\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n                    s9 = peg$parse_();\n                  }\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 41) {\n                      s9 = peg$c6;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c60(s5, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecountAggregate() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseCOUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parse_();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parse_();\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parseinBetweenParanthesisColumn();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parseinBetweenParanthesisColumn();\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = [];\n                  s9 = peg$parse_();\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n                    s9 = peg$parse_();\n                  }\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 41) {\n                      s9 = peg$c6;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c61(s5, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesumAggregate() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSUM();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parse_();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parse_();\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parseinBetweenParanthesisColumn();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parseinBetweenParanthesisColumn();\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = [];\n                  s9 = peg$parse_();\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n                    s9 = peg$parse_();\n                  }\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 41) {\n                      s9 = peg$c6;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c62(s5, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroupBy() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseGROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseBY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parsegroupByRestValue();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parsegroupByRestValue();\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parse_();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parse_();\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c63(s5, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroupByRestValue() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parse_();\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$parse_();\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 44) {\n        s2 = peg$c9;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c10); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parse_();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parse_();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsecolumn();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parse_();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parse_();\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c30(s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorderBy() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseBY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorderByQry();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parserestOrderByQry();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parserestOrderByQry();\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c64(s5, s6);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parserestOrderByQry() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parse_();\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$parse_();\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 44) {\n        s2 = peg$c9;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c10); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parse_();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parse_();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseorderByQry();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c65(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorderByQry() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseorderByType();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c66(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorderByType() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseOrderByTypes();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parse_();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parse_();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c67(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedistinct() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseDISTINCT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c68();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseskip() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSKIP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseNumber();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c69(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseNumber();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c70(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhereQry() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseWHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsewhereitems();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c71(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhereitems() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewhereQryWithoutParanthesis();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsewhereQryWithParanthesis();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsejoinWhereItems();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsejoinWhereItems();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c72(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoinWhereItems() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseJoinOp();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parse_();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parse_();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsewhereQryWithoutParanthesis();\n          if (s4 === peg$FAILED) {\n            s4 = peg$parsewhereQryWithParanthesis();\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c73(s2, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhereQryWithoutParanthesis() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewhereItem();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsejoinWhereItem();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsejoinWhereItem();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c74(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhereQryWithParanthesis() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s1 = peg$c4;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c5); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsewhereItem();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsejoinWhereItem();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsejoinWhereItem();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parse_();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parse_();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c6;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c7); }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c75(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoinWhereItem() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseJoinOp();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsewhereItem();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c76(s2, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhereItem() {\n    var s0;\n\n    s0 = peg$parseequalToItem();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parselikeItem();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseinItem();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseoperatorItem();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsebetweenItem();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseequalToItem() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsecolAfterDot();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parse_();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parse_();\n        }\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 61) {\n            s4 = peg$c34;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c35); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parse_();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parse_();\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsevalue();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c77(s1, s2, s6);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseoperatorItem() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsecolAfterDot();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parse_();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parse_();\n        }\n        if (s3 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c78) {\n            s4 = peg$c78;\n            peg$currPos += 2;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c79); }\n          }\n          if (s4 === peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c80) {\n              s4 = peg$c80;\n              peg$currPos += 2;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c81); }\n            }\n            if (s4 === peg$FAILED) {\n              if (input.substr(peg$currPos, 2) === peg$c82) {\n                s4 = peg$c82;\n                peg$currPos += 2;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c83); }\n              }\n              if (s4 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 62) {\n                  s4 = peg$c84;\n                  peg$currPos++;\n                } else {\n                  s4 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c85); }\n                }\n                if (s4 === peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 60) {\n                    s4 = peg$c86;\n                    peg$currPos++;\n                  } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c87); }\n                  }\n                }\n              }\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parse_();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parse_();\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsevalue();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c88(s1, s2, s4, s6);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetweenItem() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsecolAfterDot();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parse_();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parse_();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseBETWEEN();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parse_();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parse_();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 40) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parse_();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parse_();\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsevalue();\n                  if (s8 !== peg$FAILED) {\n                    s9 = [];\n                    s10 = peg$parse_();\n                    while (s10 !== peg$FAILED) {\n                      s9.push(s10);\n                      s10 = peg$parse_();\n                    }\n                    if (s9 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 44) {\n                        s10 = peg$c9;\n                        peg$currPos++;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = [];\n                        s12 = peg$parse_();\n                        while (s12 !== peg$FAILED) {\n                          s11.push(s12);\n                          s12 = peg$parse_();\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsevalue();\n                          if (s12 !== peg$FAILED) {\n                            s13 = [];\n                            s14 = peg$parse_();\n                            while (s14 !== peg$FAILED) {\n                              s13.push(s14);\n                              s14 = peg$parse_();\n                            }\n                            if (s13 !== peg$FAILED) {\n                              if (input.charCodeAt(peg$currPos) === 41) {\n                                s14 = peg$c6;\n                                peg$currPos++;\n                              } else {\n                                s14 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                              }\n                              if (s14 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c89(s1, s2, s8, s12);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinItem() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsecolAfterDot();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parse_();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parse_();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseIN();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parse_();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parse_();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 40) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parse_();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parse_();\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsevalue();\n                  if (s8 !== peg$FAILED) {\n                    s9 = [];\n                    s10 = peg$parse_();\n                    while (s10 !== peg$FAILED) {\n                      s9.push(s10);\n                      s10 = peg$parse_();\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$parseinBetweenParanthesisItem();\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$parseinBetweenParanthesisItem();\n                      }\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 41) {\n                          s11 = peg$c6;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c90(s1, s2, s8, s10);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinBetweenParanthesisColumn() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s1 = peg$c9;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c10); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c30(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinBetweenParanthesisItem() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s1 = peg$c9;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c10); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsevalue();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c30(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselikeItem() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsecolAfterDot();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parse_();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parse_();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseLIKE();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parse_();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parse_();\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parselikeType();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c91(s1, s2, s6);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselikeType() {\n    var s0;\n\n    s0 = peg$parselikeType1();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parselikeType2();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parselikeType3();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parselikeType1() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c92) {\n      s1 = peg$c92;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c93); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseWord();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c94) {\n              s5 = peg$c94;\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c95); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c96(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselikeType2() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c92) {\n      s1 = peg$c92;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c93); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseWord();\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 39) {\n            s4 = peg$c97;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c98); }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c99(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselikeType3() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c97;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c98); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseWord();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parse_();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parse_();\n        }\n        if (s3 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c94) {\n            s4 = peg$c94;\n            peg$currPos += 2;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c95); }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c100(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolAfterDot() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c48;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c49); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsecolumn();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c101(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoinQry() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoinType();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseJOIN();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parse_();\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parse_();\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetableName();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$parse_();\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseON();\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parse_();\n                if (s8 !== peg$FAILED) {\n                  while (s8 !== peg$FAILED) {\n                    s7.push(s8);\n                    s8 = peg$parse_();\n                  }\n                } else {\n                  s7 = peg$FAILED;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseonValue();\n                  if (s8 !== peg$FAILED) {\n                    s9 = [];\n                    s10 = peg$parse_();\n                    while (s10 !== peg$FAILED) {\n                      s9.push(s10);\n                      s10 = peg$parse_();\n                    }\n                    if (s9 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 61) {\n                        s10 = peg$c34;\n                        peg$currPos++;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c35); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseonValue();\n                        if (s11 !== peg$FAILED) {\n                          s12 = [];\n                          s13 = peg$parse_();\n                          while (s13 !== peg$FAILED) {\n                            s12.push(s13);\n                            s13 = peg$parse_();\n                          }\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c102(s1, s4, s8, s11);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseonValue() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c104.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c105); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c104.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c105); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c106(s1);\n    }\n    s0 = s1;\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c103); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoinType() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseINNER();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseLEFT();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parse_();\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c107(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseupdateQuery() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseUPDATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetableName();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSET();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parse_();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parse_();\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseupdateValue();\n                if (s7 !== peg$FAILED) {\n                  s8 = [];\n                  s9 = peg$parse_();\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n                    s9 = peg$parse_();\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsewhereQry();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$parse_();\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$parse_();\n                      }\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c108(s3, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseupdateValue() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseequalToItem();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parseupdateValueBetweenItem();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parseupdateValueBetweenItem();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c109(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseupdateValueBetweenItem() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s1 = peg$c9;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c10); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseequalToItem();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c110(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseopenQuery() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseOPENDB();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedbName();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c111(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseisDbExistQuery() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseISDBEXIST();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedbName();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetableInfo();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c112(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetableInfo() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseTABLE();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parse_();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parse_();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetableName();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseversion();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c113(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetableName() {\n    var s0, s1;\n\n    peg$silentFails++;\n    s0 = peg$parseIdentifier();\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c114); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedbName() {\n    var s0, s1;\n\n    peg$silentFails++;\n    s0 = peg$parseIdentifier();\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c115); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1;\n\n    peg$silentFails++;\n    s0 = peg$parseIdentifier();\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c116); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseJoinOp() {\n    var s0;\n\n    s0 = peg$parseAnd();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOr();\n    }\n\n    return s0;\n  }\n\n  function peg$parseOrderByTypes() {\n    var s0, s1;\n\n    peg$silentFails++;\n    if (input.substr(peg$currPos, 3) === peg$c118) {\n      s0 = peg$c118;\n      peg$currPos += 3;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c119); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 4) === peg$c120) {\n        s0 = peg$c120;\n        peg$currPos += 4;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c121); }\n      }\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c117); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseAnd() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c122) {\n      s0 = peg$c122;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c123); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOr() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c124) {\n      s0 = peg$c124;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c125); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue() {\n    var s0, s1;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseColumnValue();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseNumber();\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c110(s1);\n    }\n    s0 = s1;\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c126); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseColumnValue() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c97;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c98); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseWord();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c97;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c98); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c30(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseIdentifier() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c128.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c129); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c128.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c129); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c106(s1);\n    }\n    s0 = s1;\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c127); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseWord() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parseLetter();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseLetter();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c131(s1);\n    }\n    s0 = s1;\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c130); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseWordAndNumber() {\n    var s0;\n\n    if (peg$c132.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c133); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLetter() {\n    var s0;\n\n    if (peg$c134.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c135); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseNumber() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parseDigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseDigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c137(s1);\n    }\n    s0 = s1;\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c136); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDigit() {\n    var s0;\n\n    if (peg$c138.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c139); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseWs() {\n    var s0, s1;\n\n    peg$silentFails++;\n    if (peg$c141.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c142); }\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c140); }\n    }\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parseWs();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseWs();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c144(s1);\n    }\n    s0 = s1;\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c143); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseA() {\n    var s0;\n\n    if (peg$c145.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c146); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseB() {\n    var s0;\n\n    if (peg$c147.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c148); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseC() {\n    var s0;\n\n    if (peg$c149.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c150); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseD() {\n    var s0;\n\n    if (peg$c151.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c152); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseE() {\n    var s0;\n\n    if (peg$c153.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c154); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseF() {\n    var s0;\n\n    if (peg$c155.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c156); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseG() {\n    var s0;\n\n    if (peg$c157.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c158); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseH() {\n    var s0;\n\n    if (peg$c159.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c160); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseI() {\n    var s0;\n\n    if (peg$c161.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c162); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseJ() {\n    var s0;\n\n    if (peg$c163.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c164); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseK() {\n    var s0;\n\n    if (peg$c165.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c166); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseL() {\n    var s0;\n\n    if (peg$c167.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c168); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseM() {\n    var s0;\n\n    if (peg$c169.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c170); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseN() {\n    var s0;\n\n    if (peg$c171.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c172); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseO() {\n    var s0;\n\n    if (peg$c173.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c174); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseP() {\n    var s0;\n\n    if (peg$c175.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c176); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseQ() {\n    var s0;\n\n    if (peg$c177.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c178); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseR() {\n    var s0;\n\n    if (peg$c179.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c180); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseS() {\n    var s0;\n\n    if (peg$c181.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c182); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseT() {\n    var s0;\n\n    if (peg$c183.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c184); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseU() {\n    var s0;\n\n    if (peg$c185.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c186); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseV() {\n    var s0;\n\n    if (peg$c187.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c188); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseW() {\n    var s0;\n\n    if (peg$c189.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c190); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseX() {\n    var s0;\n\n    if (peg$c191.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c192); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseY() {\n    var s0;\n\n    if (peg$c193.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c194); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseZ() {\n    var s0;\n\n    if (peg$c195.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c196); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseMIN() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseI();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseN();\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c197); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseMAX() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseX();\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c198); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseAVG() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseA();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseV();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseG();\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c199); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOUNT() {\n    var s0, s1, s2, s3, s4, s5;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseC();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseO();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseU();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseN();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseT();\n            if (s5 !== peg$FAILED) {\n              s1 = [s1, s2, s3, s4, s5];\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c200); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSUM() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseU();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseM();\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c201); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseAGGREGATE() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseA();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseG();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseG();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseR();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseG();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseA();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseT();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseE();\n                    if (s9 !== peg$FAILED) {\n                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c202); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseBETWEEN() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseB();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseE();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseW();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseE();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseN();\n                if (s7 !== peg$FAILED) {\n                  s1 = [s1, s2, s3, s4, s5, s6, s7];\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c203); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseIN() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseI();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseN();\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c204); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLIKE() {\n    var s0, s1, s2, s3, s4;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseI();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseK();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseE();\n          if (s4 !== peg$FAILED) {\n            s1 = [s1, s2, s3, s4];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c205); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSELECT() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseE();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseL();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseE();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseC();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseT();\n              if (s6 !== peg$FAILED) {\n                s1 = [s1, s2, s3, s4, s5, s6];\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c206); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDISTINCT() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseI();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseI();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseN();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseC();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseT();\n                  if (s8 !== peg$FAILED) {\n                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8];\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c207); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseORDER() {\n    var s0, s1, s2, s3, s4, s5;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseO();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseR();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseD();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseE();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseR();\n            if (s5 !== peg$FAILED) {\n              s1 = [s1, s2, s3, s4, s5];\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c208); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseBY() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseB();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseY();\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c209); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseFROM() {\n    var s0, s1, s2, s3, s4;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseF();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseR();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseM();\n          if (s4 !== peg$FAILED) {\n            s1 = [s1, s2, s3, s4];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c210); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseGROUP() {\n    var s0, s1, s2, s3, s4, s5;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseR();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseU();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseP();\n            if (s5 !== peg$FAILED) {\n              s1 = [s1, s2, s3, s4, s5];\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c211); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLIMIT() {\n    var s0, s1, s2, s3, s4, s5;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseI();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseM();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseI();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseT();\n            if (s5 !== peg$FAILED) {\n              s1 = [s1, s2, s3, s4, s5];\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c212); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSKIP() {\n    var s0, s1, s2, s3, s4;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseK();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseI();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseP();\n          if (s4 !== peg$FAILED) {\n            s1 = [s1, s2, s3, s4];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c213); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseWHERE() {\n    var s0, s1, s2, s3, s4, s5;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseH();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseR();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseE();\n            if (s5 !== peg$FAILED) {\n              s1 = [s1, s2, s3, s4, s5];\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c214); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseINSERT() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseI();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseN();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseE();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseT();\n              if (s6 !== peg$FAILED) {\n                s1 = [s1, s2, s3, s4, s5, s6];\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c215); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseINTO() {\n    var s0, s1, s2, s3, s4;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseI();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseN();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseO();\n          if (s4 !== peg$FAILED) {\n            s1 = [s1, s2, s3, s4];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c216); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRETURN() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseR();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseE();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseU();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseN();\n              if (s6 !== peg$FAILED) {\n                s1 = [s1, s2, s3, s4, s5, s6];\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c217); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseVALUES() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseV();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseL();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseU();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseS();\n              if (s6 !== peg$FAILED) {\n                s1 = [s1, s2, s3, s4, s5, s6];\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c218); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSKIPDATACHECK() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseK();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseI();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseP();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseD();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseA();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseT();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseA();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseC();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseH();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseE();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseC();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseK();\n                            if (s13 !== peg$FAILED) {\n                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13];\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c219); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseUPDATE() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseU();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseP();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseD();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseA();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseT();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseE();\n              if (s6 !== peg$FAILED) {\n                s1 = [s1, s2, s3, s4, s5, s6];\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c220); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSET() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseE();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseT();\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c221); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDELETE() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseE();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseL();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseE();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseT();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseE();\n              if (s6 !== peg$FAILED) {\n                s1 = [s1, s2, s3, s4, s5, s6];\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c222); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseVERSION() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseV();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseE();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseR();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseS();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseI();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseO();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseN();\n                if (s7 !== peg$FAILED) {\n                  s1 = [s1, s2, s3, s4, s5, s6, s7];\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c223); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseENABLESEARCH() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseN();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseA();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseB();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseL();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseE();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseS();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseE();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseA();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseR();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseC();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseH();\n                          if (s12 !== peg$FAILED) {\n                            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12];\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c224); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseMULTIENTRY() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseU();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseL();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseI();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseE();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseT();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseR();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseY();\n                      if (s10 !== peg$FAILED) {\n                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c225); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsePRIMARYKEY() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseR();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseI();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseM();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseR();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseY();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseK();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseE();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseY();\n                      if (s10 !== peg$FAILED) {\n                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c226); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseUNIQUE() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseU();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseN();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseI();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseQ();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseU();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseE();\n              if (s6 !== peg$FAILED) {\n                s1 = [s1, s2, s3, s4, s5, s6];\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c227); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTRING() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseT();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseR();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseI();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseG();\n              if (s6 !== peg$FAILED) {\n                s1 = [s1, s2, s3, s4, s5, s6];\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c228); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseNUMBER() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseU();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseM();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseB();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseR();\n              if (s6 !== peg$FAILED) {\n                s1 = [s1, s2, s3, s4, s5, s6];\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c136); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOBJECT() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseO();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseB();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseJ();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseE();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseC();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseT();\n              if (s6 !== peg$FAILED) {\n                s1 = [s1, s2, s3, s4, s5, s6];\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c229); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseARRAY() {\n    var s0, s1, s2, s3, s4, s5;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseA();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseR();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseR();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseA();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseY();\n            if (s5 !== peg$FAILED) {\n              s1 = [s1, s2, s3, s4, s5];\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c230); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseBOOLEAN() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseB();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseO();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseL();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseA();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseN();\n                if (s7 !== peg$FAILED) {\n                  s1 = [s1, s2, s3, s4, s5, s6, s7];\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c231); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDATETIME() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseE();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 95) {\n              s5 = peg$c233;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c234); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseT();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseI();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseM();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseE();\n                    if (s9 !== peg$FAILED) {\n                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c232); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseAUTOINCREMENT() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseA();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseU();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseO();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseI();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseN();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseC();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseR();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseE();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseM();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseE();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseN();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseT();\n                            if (s13 !== peg$FAILED) {\n                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13];\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c235); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseNOTNULL() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseO();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseN();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseU();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseL();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseL();\n                if (s7 !== peg$FAILED) {\n                  s1 = [s1, s2, s3, s4, s5, s6, s7];\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c236); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDEFAULT() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseE();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseF();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseA();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseU();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseL();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseT();\n                if (s7 !== peg$FAILED) {\n                  s1 = [s1, s2, s3, s4, s5, s6, s7];\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c237); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDEFINE() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseE();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseF();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseI();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseE();\n              if (s6 !== peg$FAILED) {\n                s1 = [s1, s2, s3, s4, s5, s6];\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c238); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseTABLE() {\n    var s0, s1, s2, s3, s4, s5;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseB();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseL();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseE();\n            if (s5 !== peg$FAILED) {\n              s1 = [s1, s2, s3, s4, s5];\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c239); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDB() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseB();\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c240); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseISDBEXIST() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseI();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseD();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseB();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseX();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseI();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseS();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseT();\n                    if (s9 !== peg$FAILED) {\n                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c241); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPENDB() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseO();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseP();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseN();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseD();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseB();\n              if (s6 !== peg$FAILED) {\n                s1 = [s1, s2, s3, s4, s5, s6];\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c242); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDISABLESEARCH() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseI();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseA();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseB();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseL();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseE();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseS();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseE();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseA();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseR();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseC();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseH();\n                            if (s13 !== peg$FAILED) {\n                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13];\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c243); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseJOIN() {\n    var s0, s1, s2, s3, s4;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseJ();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseO();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseI();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseN();\n          if (s4 !== peg$FAILED) {\n            s1 = [s1, s2, s3, s4];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c244); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseON() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseO();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseN();\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c245); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseINNER() {\n    var s0, s1, s2, s3, s4, s5;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseI();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseN();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseE();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseR();\n            if (s5 !== peg$FAILED) {\n              s1 = [s1, s2, s3, s4, s5];\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c246); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLEFT() {\n    var s0, s1, s2, s3, s4;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseE();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseF();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseT();\n          if (s4 !== peg$FAILED) {\n            s1 = [s1, s2, s3, s4];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c247); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseAS() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseA();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseS();\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c248); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseUPSERT() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseU();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseP();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseE();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseT();\n              if (s6 !== peg$FAILED) {\n                s1 = [s1, s2, s3, s4, s5, s6];\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c249); }\n    }\n\n    return s0;\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LogHelper\", function() { return LogHelper; });\n/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);\n\n\nvar LogHelper = /** @class */ (function () {\n    function LogHelper(type, info) {\n        this.type = type;\n        this.info_ = info;\n        this.message = this.getMsg_();\n    }\n    LogHelper.log = function (msg) {\n        if (_config__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].isLogEnabled) {\n            console.log(msg);\n        }\n    };\n    LogHelper.prototype.logError = function () {\n        console.error(this.get());\n    };\n    LogHelper.prototype.logWarning = function () {\n        console.warn(this.get());\n    };\n    LogHelper.prototype.get = function () {\n        return {\n            message: this.message,\n            type: this.type\n        };\n    };\n    LogHelper.prototype.getMsg_ = function () {\n        var errMsg;\n        switch (this.type) {\n            case _enums__WEBPACK_IMPORTED_MODULE_0__[\"ERROR_TYPE\"].SynTaxError:\n                errMsg = this.info_;\n                break;\n            default:\n                errMsg = this.message;\n                break;\n        }\n        return errMsg;\n    };\n    return LogHelper;\n}());\n\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ERROR_TYPE\", function() { return ERROR_TYPE; });\nvar ERROR_TYPE;\n(function (ERROR_TYPE) {\n    ERROR_TYPE[\"SynTaxError\"] = \"syntax_error\";\n})(ERROR_TYPE || (ERROR_TYPE = {}));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Config\", function() { return Config; });\nvar Config = /** @class */ (function () {\n    function Config() {\n    }\n    Config.isLogEnabled = false;\n    return Config;\n}());\n\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Query\", function() { return Query; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\n\nvar Query = /** @class */ (function () {\n    function Query(qry) {\n        this.topLevelKeys_ = [\"skip\", \"limit\"];\n        this.query_ = this.parseSql_(qry);\n    }\n    Query.prototype.map = function (key, value) {\n        var stringifiedValue = JSON.stringify(this.query_);\n        this.query_ = this.parseJson_(stringifiedValue.replace('\"' + key + '\"', JSON.stringify(value)));\n    };\n    Query.prototype.parseJson_ = function (value) {\n        return _util__WEBPACK_IMPORTED_MODULE_0__[\"Util\"].parseJson(value);\n    };\n    Query.prototype.parseSql_ = function (value) {\n        return _util__WEBPACK_IMPORTED_MODULE_0__[\"Util\"].parseSql(value);\n    };\n    return Query;\n}());\n\n\n\n/***/ })\n/******/ ]);\n//# sourceMappingURL=sqlweb.commonjs2.js.map","export default __webpack_public_path__ + \"scripts/jsstore.worker.min.4fcffd281d2ca926f60dafd2adce34ae.js\";","/*!\n * @license :jsstore - V3.13.5 - 06/04/2021\n * https://github.com/ujjwalguptaofficial/JsStore\n * Copyright (c) 2021 @Ujjwal Gupta; Licensed MIT\n */\nmodule.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=1)}([,function(e,t,n){\"use strict\";var r,o,i,u,s,a,c,p,d;n.r(t),n.d(t,\"Instance\",(function(){return m})),n.d(t,\"Connection\",(function(){return b})),n.d(t,\"Config\",(function(){return h})),n.d(t,\"enableLog\",(function(){return g})),n.d(t,\"DATA_TYPE\",(function(){return i})),function(e){e.WorkerNotSupplied=\"worker_not_supplied\",e.IndexedDbUndefined=\"indexeddb_undefined\",e.UndefinedColumn=\"undefined_column\",e.UndefinedValue=\"undefined_value\",e.UndefinedColumnName=\"undefined_column_name\",e.UndefinedDbName=\"undefined_database_name\",e.UndefinedColumnValue=\"undefined_column_value\",e.NotArray=\"not_array\",e.NoValueSupplied=\"no_value_supplied\",e.ColumnNotExist=\"column_not_exist\",e.EnableSearchOff=\"enable_search_off\",e.InvalidOp=\"invalid_operator\",e.NullValue=\"null_value\",e.WrongDataType=\"wrong_data_type\",e.TableNotExist=\"table_not_exist\",e.DbNotExist=\"db_not_exist\",e.ConnectionAborted=\"connection_aborted\",e.ConnectionClosed=\"connection_closed\",e.NotObject=\"not_object\",e.InvalidConfig=\"invalid_config\",e.DbBlocked=\"Db_blocked\",e.IndexedDbNotSupported=\"indexeddb_not_supported\",e.NullValueInWhere=\"null_value_in_where\",e.InvalidJoinQuery=\"invalid_join_query\",e.InvalidOrderQuery=\"invalid_order_query\",e.InvalidQuery=\"invalid_query\",e.InvalidGroupQuery=\"invalid_group_query\",e.ImportScriptsFailed=\"import_scripts_failed\",e.MethodNotExist=\"method_not_exist\"}(r||(r={})),function(e){e.Registered=\"registerd\",e.Failed=\"failed\",e.NotStarted=\"not_started\"}(o||(o={})),function(e){e.String=\"string\",e.Object=\"object\",e.Array=\"array\",e.Number=\"number\",e.Boolean=\"boolean\",e.Null=\"null\",e.DateTime=\"date_time\"}(i||(i={})),function(e){e.InitDb=\"init_db\",e.IsDbExist=\"is_db_exist\",e.GetDbVersion=\"get_db_version\",e.GetDbList=\"get_db_list\",e.Get=\"get\",e.Set=\"set\",e.Select=\"select\",e.Insert=\"insert\",e.Update=\"update\",e.Remove=\"remove\",e.GetDbSchema=\"get_db_schema\",e.OpenDb=\"open_db\",e.Clear=\"clear\",e.DropDb=\"drop_db\",e.Count=\"count\",e.ChangeLogStatus=\"change_log_status\",e.Terminate=\"terminate\",e.Transaction=\"transaction\",e.InitKeyStore=\"init_keystore\",e.CloseDb=\"close_db\",e.Union=\"union\",e.Intersect=\"intersect\",e.ImportScripts=\"import_scripts\"}(u||(u={})),function(e){e.RequestQueueEmpty=\"requestQueueEmpty\",e.RequestQueueFilled=\"requestQueueFilled\"}(s||(s={})),function(e){e.Where=\"where\",e.Like=\"like\",e.Regex=\"regex\",e.In=\"in\",e.Equal=\"=\",e.Between=\"-\",e.GreaterThan=\">\",e.LessThan=\"<\",e.GreaterThanEqualTo=\">=\",e.LessThanEqualTo=\"<=\",e.NotEqualTo=\"!=\",e.Aggregate=\"aggregate\",e.Max=\"max\",e.Min=\"min\",e.Avg=\"avg\",e.Count=\"count\",e.Sum=\"sum\",e.Or=\"or\",e.Skip=\"skip\",e.Limit=\"limit\",e.And=\"and\",e.IgnoreCase=\"ignoreCase\",e.Then=\"then\"}(a||(a={})),function(e){e.ReadOnly=\"readonly\",e.ReadWrite=\"readwrite\"}(c||(c={})),function(e){e.First=\"f\",e.Last=\"l\",e.Any=\"a\"}(p||(p={})),function(e){e.Connected=\"connected\",e.Closed=\"closed\",e.NotStarted=\"not_started\",e.UnableToStart=\"unable_to_start\",e.ClosedByJsStore=\"closed_by_jsstore\"}(d||(d={}));var l,h=function(){function e(){}return e.isLogEnabled=!1,e.isRuningInWorker=!0,e}(),f=function(){function e(e,t){void 0===t&&(t=null),this.type=e,this._info=t,this.message=this.getMsg()}return e.prototype.throw=function(){throw this.get()},e.log=function(e){h.isLogEnabled&&console.log(e)},e.prototype.logError=function(){console.error(this.get())},e.prototype.logWarning=function(){console.warn(this.get())},e.prototype.get=function(){return{message:this.message,type:this.type}},e.prototype.getMsg=function(){var e;switch(this.type){case r.WorkerNotSupplied:e=\"Worker object is not passed in instance constructor\";break;case r.IndexedDbUndefined:e=\"Browser does not support indexeddb\";break;default:e=this.message}return e},e}(),_=function(){function e(e){this.isDbOpened_=!1,this.isDbIdle_=!0,this.requestQueue_=[],this.isCodeExecuting_=!1,this.inactivityTimer_=-1e3,this.eventQueue=[],this.middlewares=[],this.whiteListApi_=[u.InitDb,u.IsDbExist,u.GetDbVersion,u.GetDbList,u.OpenDb,u.GetDbSchema,u.Get,u.Set,u.ChangeLogStatus,u.Terminate,u.InitKeyStore],e?(this.worker_=e,this.worker_.onmessage=this.onMessageFromWorker_.bind(this)):h.isRuningInWorker=!1}return e.prototype.initKeyStore_=function(){h.isRuningInWorker?this.prcoessExecutionOfQry_({name:u.InitKeyStore,onSuccess:function(){},onError:function(e){console.error(e)}},0):JsStoreWorker.KeyStore.init()},e.prototype.onMessageFromWorker_=function(e){this.processFinishedQuery_(e.data)},e.prototype.processFinishedQuery_=function(e){var t=this.requestQueue_.shift();if(t){if(f.log(\"request \"+t.name+\" finished\"),e.errorOccured)t.onError(e.errorDetails);else{switch(t.name){case u.OpenDb:case u.InitDb:this.isDbOpened_=!0;break;case u.Terminate:this.isDbOpened_=!1,!0===h.isRuningInWorker&&this.worker_.terminate();break;case u.CloseDb:this.requestQueue_.length>0?this.openDb_():(this.isDbIdle_=!0,this.callEvent(s.RequestQueueEmpty,[]))}t.onSuccess(e.returnedValue)}this.isCodeExecuting_=!1,this.executeQry_()}},e.prototype.openDb_=function(){this.initKeyStore_(),this.prcoessExecutionOfQry_({name:u.OpenDb,query:this.activeDbName,onSuccess:function(){},onError:function(e){console.error(e)}},1)},e.prototype.executeMiddleware_=function(e){var t=this;return new Promise((function(n){var r=0,o=t.middlewares.length-1,i=function(){r<=o?t.middlewares[r++](e,i):n()};i()}))},e.prototype.pushApi=function(e){var t=this;return new Promise((function(n,r){t.executeMiddleware_(e).then((function(){e.onSuccess=n,e.onError=r,0===t.requestQueue_.length&&(t.callEvent(s.RequestQueueFilled,[]),!0===t.isDbIdle_&&!0===t.isDbOpened_?t.openDb_():(clearTimeout(t.inactivityTimer_),t.initKeyStore_())),t.prcoessExecutionOfQry_(e)})).catch(r)}))},e.prototype.prcoessExecutionOfQry_=function(e,t){this.isDbIdle_=!1,null!=t?this.requestQueue_.splice(t,0,e):this.requestQueue_.push(e),f.log(\"request pushed: \"+e.name),this.executeQry_()},e.prototype.executeQry_=function(){var e=this,t=this.requestQueue_.length;if(!this.isCodeExecuting_&&t>0){if(!0===this.isDbOpened_)return void this.sendRequestToWorker_(this.requestQueue_[0]);var n=this.requestQueue_.findIndex((function(t){return e.whiteListApi_.indexOf(t.name)>=0}));n>=0&&(this.requestQueue_.splice(0,0,this.requestQueue_.splice(n,1)[0]),this.sendRequestToWorker_(this.requestQueue_[0]))}else 0===t&&!1===this.isDbIdle_&&this.isDbOpened_&&(this.inactivityTimer_=setTimeout((function(){e.prcoessExecutionOfQry_({name:u.CloseDb,onSuccess:function(){},onError:function(e){console.error(e)}})}),100))},e.prototype.sendRequestToWorker_=function(e){this.isCodeExecuting_=!0;var t={name:e.name,query:e.query};!0===h.isRuningInWorker?this.worker_.postMessage(t):new JsStoreWorker.QueryExecutor(this.processFinishedQuery_.bind(this)).checkConnectionAndExecuteLogic(t)},e.prototype.callEvent=function(e,t){this.eventQueue.filter((function(t){if(t.event===e)return t})).forEach((function(e){e.callback.apply(e,t)}))},e}(),y=(l=function(e,t){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),b=function(e){function t(t){return e.call(this,t)||this}return y(t,e),t.prototype.openDb=function(e){return this.activeDbName=e,this.pushApi({name:u.OpenDb,query:e})},t.prototype.initDb=function(e){return this.activeDbName=e.name,this.pushApi({name:u.InitDb,query:e})},t.prototype.dropDb=function(){return this.pushApi({name:u.DropDb})},t.prototype.select=function(e){return this.pushApi({name:u.Select,query:e})},t.prototype.count=function(e){return this.pushApi({name:u.Count,query:e})},t.prototype.insert=function(e){return this.pushApi({name:u.Insert,query:e})},t.prototype.update=function(e){return this.pushApi({name:u.Update,query:e})},t.prototype.remove=function(e){return this.pushApi({name:u.Remove,query:e})},t.prototype.clear=function(e){return this.pushApi({name:u.Clear,query:e})},t.prototype.setLogStatus=function(e){h.isLogEnabled=e||h.isLogEnabled,this.pushApi({name:u.ChangeLogStatus,query:h.isLogEnabled})},t.prototype.getDbVersion=function(e){return this.pushApi({name:u.GetDbVersion,query:e})},t.prototype.isDbExist=function(e){return this.pushApi({name:u.IsDbExist,query:e})},t.prototype.getDbList=function(){return this.pushApi({name:u.GetDbList,query:null})},t.prototype.getDbSchema=function(e){return this.pushApi({name:u.GetDbSchema,query:e})},t.prototype.get=function(e){return this.pushApi({name:u.Get,query:e})},t.prototype.set=function(e,t){return this.pushApi({name:u.Set,query:{key:e,value:t}})},t.prototype.terminate=function(){return this.pushApi({name:u.Terminate})},t.prototype.transaction=function(e){return this.pushApi({name:u.Transaction,query:e})},t.prototype.on=function(e,t){this.eventQueue.push({event:e,callback:t})},t.prototype.off=function(e,t){var n=this;this.eventQueue.map((function(t,n){if(t.event===e)return n})).forEach((function(e){n.eventQueue.splice(e,0)}))},t.prototype.union=function(e){return this.pushApi({name:u.Union,query:e})},t.prototype.intersect=function(e){return this.pushApi({name:u.Intersect,query:e})},t.prototype.addPlugin=function(e,t){e.setup(this,t)},t.prototype.addMiddleware=function(e){this.middlewares.push(e)},t.prototype.importScripts=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.pushApi({name:u.ImportScripts,query:e})},t}(_),m=function(e){return console.warn(\"Instance is obsolete, please use Connection. Refer - https://jsstore.net/tutorial/connection/\"),new b(e)},g=function(){h.isLogEnabled=!0}}]);\n//# sourceMappingURL=jsstore.commonjs2.min.js.map","// 参考：https://jsstore.net/tutorial/get-started/\r\nimport * as JsStore from 'jsstore'\r\n// import jsStoreWorker from 'jsstore/dist/jsstore.worker.js'\r\n// import jsStoreWorkerMin from 'jsstore/dist/jsstore.worker.min.js'\r\n// 参考：https://github.com/ujjwalguptaofficial/sqlweb/wiki\r\nimport SqlWeb from 'sqlweb'\r\nimport { DbSchema, TableSchema } from './Interfaces'\r\n\r\nconst isDev = process.env.NODE_ENV === 'development'\r\n// 需要file-loader依赖包\r\nconst getWorkerPath = (): any => {\r\n   // return dev build when env is development\r\n   if (isDev) {\r\n      // eslint-disable-next-line import/no-webpack-loader-syntax\r\n      return require('file-loader?name=scripts/[name].[hash].js!jsstore/dist/jsstore.worker.js')\r\n      // return jsStoreWorker\r\n   } else { // return prod build when env is production\r\n      // eslint-disable-next-line import/no-webpack-loader-syntax\r\n      return require('file-loader?name=scripts/[name].[hash].js!jsstore/dist/jsstore.worker.min.js')\r\n      // return jsStoreWorkerMin\r\n   }\r\n}\r\nconst workerPath = getWorkerPath()\r\n\r\nlet connection, originalInsert, originalUpdate, originalRemove, originalSelect\r\n\r\n/**\r\n * @description 创建数据库连接\r\n * @returns {Object} 返回创建的数据库连接\r\n */\r\nfunction connect (): Promise<any> {\r\n   try {\r\n      // 连接不存在时创建连接\r\n      // The connection variable will be used to execute the further query.\r\n      // A connection will handle one db at a time.\r\n      // Do not create multiple connection for one db.\r\n      if (!connection) {\r\n         connection = new JsStore.Connection(new Worker(workerPath))\r\n         connection.setLogStatus(isDev)\r\n         // add SqlWeb\r\n         connection.addPlugin(SqlWeb)\r\n\r\n         originalInsert = connection.insert.bind(connection)\r\n         originalUpdate = connection.update.bind(connection)\r\n         originalRemove = connection.remove.bind(connection)\r\n         originalSelect = connection.select.bind(connection)\r\n\r\n         connection.createDb = createDb\r\n         connection.createDbSchema = createDbSchema\r\n         connection.createTable = createTable\r\n         connection.insert = insert\r\n         connection.update = update\r\n         connection.remove = remove\r\n         connection.select = select\r\n         connection.paging = paging\r\n      }\r\n\r\n      return Promise.resolve(connection)\r\n   } catch (error) {\r\n      return Promise.reject(error)\r\n   }\r\n}\r\n\r\n/**\r\n * 生成数据库元数据\r\n * @param {String} dbName 数据库名\r\n * @param {Array} tableSchemaList 数据库表范式，包含表名和表的各个字段及其约束定义，值格式为：[{\r\n *    name: 'string',\r\n\t\tcolumns: {\r\n\t\t\tid: { notNull: true, dataType: 'number' },\r\n\t\t\titemName: { notNull: true, dataType: 'string' },\r\n\t\t\tprice: { notNull: true, dataType: 'number' },\r\n\t\t\tquantity: { notNull: true, dataType: 'number' },\r\n\t\t\t...\r\n\t\t}\r\n * },...]\r\n */\r\nfunction createDbSchema (dbName: string, tableSchemaList: TableSchema[]): DbSchema {\r\n   const tables = tableSchemaList.map(tm => {\r\n      // Here \"_id\" is name of column\r\n      tm.columns._id = { primaryKey: true, autoIncrement: true }\r\n      return tm\r\n   })\r\n\r\n   const db = {\r\n      name: dbName,\r\n      tables\r\n   }\r\n\r\n   return db\r\n}\r\n\r\n/**\r\n * 初始化数据库\r\n * @param {Object} dbSchema 数据库对象\r\n * @returns 返回数据库连接对象。\r\n */\r\nasync function createDb (dbSchema: DbSchema): Promise<any> {\r\n   const database = dbSchema // createDbSchema();\r\n   const isDbCreated = await connection.initDb(database)\r\n   if (isDbCreated === true) {\r\n      console.log('db created')\r\n   } else {\r\n      console.log('db opened')\r\n   }\r\n\r\n   return connection\r\n}\r\n\r\n/**\r\n * 创建数据库表\r\n * @param dbName 数据库名\r\n * @param tableSchema 数据库表范式。{\r\n *    name: 'string',\r\n\t\tcolumns: {\r\n\t\t\tid: { notNull: true, dataType: 'number' },\r\n\t\t\titemName: { notNull: true, dataType: 'string' },\r\n\t\t\tprice: { notNull: true, dataType: 'number' },\r\n\t\t\tquantity: { notNull: true, dataType: 'number' },\r\n\t\t\t...\r\n\t\t}\r\n * }\r\n * @returns 返回一个Promise对象。值为jsStore的connection对象。\r\n */\r\nasync function createTable (dbName: string, tableSchema: TableSchema): Promise<any> {\r\n   const version = await connection.getDbVersion(dbName)\r\n   const dbSchema = await connection.getDbSchema(dbName)\r\n   tableSchema.columns._id = { primaryKey: true, autoIncrement: true }\r\n   dbSchema.tables.push({ ...tableSchema, version: version + 1 })\r\n   const newConnection = await createDb(dbSchema)\r\n\r\n   return newConnection\r\n}\r\n\r\n/**\r\n * 向表中插入数据\r\n * @param {String} tableName 表名\r\n * @param {Array} data 要插入表中的数据。数组的元素应与创建表时columns对象拥有相同属性\r\n * @returns 返回一个Promise对象。插入成功时值为插入的数据的行数。\r\n */\r\nasync function insert (tableName: string, data: any[]): Promise<number|undefined> {\r\n   const noOfDataInserted = await originalInsert({\r\n      into: tableName,\r\n      values: data\r\n   })\r\n\r\n   if (noOfDataInserted > 0) {\r\n      return Promise.resolve(noOfDataInserted)\r\n   }\r\n\r\n   return Promise.reject()\r\n}\r\n\r\n/**\r\n * 更新数据\r\n * @param {String} tableName 表名\r\n * @param {Object} expression 更新操作的表达式对象\r\n * @returns 返回一个Promise对象。值为更新操作影响的行数。\r\n */\r\nasync function update (tableName: string, expression: any): Promise<number|undefined> {\r\n   const rowsUpdated = await originalUpdate({\r\n      in: tableName,\r\n      ...expression\r\n   })\r\n\r\n   if (rowsUpdated) {\r\n      return Promise.resolve(rowsUpdated)\r\n   }\r\n\r\n   return Promise.reject()\r\n}\r\n\r\n/**\r\n * 删除数据\r\n * @param {String} tableName 表名\r\n * @param {Object} expression 删除操作的表达式对象\r\n * @returns 返回一个Promise对象。值为删除操作影响的行数。\r\n */\r\nasync function remove (tableName: string, expression: any): Promise<number|undefined> {\r\n   const rowsDeleted = await originalRemove({\r\n      from: tableName,\r\n      ...expression\r\n   })\r\n\r\n   if (rowsDeleted) {\r\n      return Promise.resolve(rowsDeleted)\r\n   }\r\n\r\n   return Promise.reject()\r\n}\r\n\r\n/**\r\n * 查询数据\r\n * @param {String} tableName 表名\r\n * @param {Object} expression 查询操作的表达式对象\r\n * @returns 返回一个Promise对象。值为查询出的数据的数组。\r\n */\r\nasync function select (tableName: string, expression: any): Promise<any[]|undefined> {\r\n   const results = await originalSelect({\r\n      from: tableName,\r\n      ...expression\r\n   })\r\n\r\n   if (results.length) {\r\n      return Promise.resolve(results)\r\n   }\r\n\r\n   return Promise.reject()\r\n}\r\n\r\n/**\r\n * 分页查询数据\r\n * @param {String} tableName 表名\r\n * @param {Object} expression 查询操作的表达式对象：{from: tableName, where: {column1:字段名, ...}, ...}\r\n * @param {Int} pageIndex 页码，默认值为1\r\n * @param {Int} pageSize 页面展示条数，默认值为10\r\n * @returns 返回一个Promise对象。值为分页查询出的数据的数组。\r\n */\r\nasync function paging (tableName: string, expression:any = {}, pageIndex:number = 1, pageSize:number = 10): Promise<any[]|undefined> {\r\n   const results = await select(tableName, {\r\n      limit: pageSize,\r\n      skip: (pageIndex - 1) * pageSize,\r\n      ...expression\r\n   })\r\n\r\n   if (results.length) {\r\n      return Promise.resolve(results)\r\n   }\r\n\r\n   return Promise.reject()\r\n}\r\n\r\n/**\r\n * 执行原生sql语句来操作indexedDB\r\n * @param {String} sqlExpression sql语句\r\n * @returns 返回一个Promise。值为执行sql语句的结果。\r\n */\r\nfunction runSql (sqlExpression: string): any {\r\n   return connection.$sql.run(sqlExpression)\r\n}\r\n\r\n/**\r\n * @description 获取参数化的sql\r\n * @param {String} sqlExpression 包含格式化参数的原生sql语句，例：select * from tableA where Id = '@Id'\r\n * @param {Object} parameters 参数对象，其property必须与sql语句中的参数一致，例：{Id:'1'}\r\n * @returns 返回参数化的sql\r\n */\r\nfunction getParameterizedSqlExpression (sqlExpression: string, parameters: any): any {\r\n   const query = new connection.$sql.Query(sqlExpression)\r\n   Object.entries(parameters).forEach((param) => {\r\n      query.map('@' + param[0], param[1])\r\n   })\r\n\r\n   return query\r\n}\r\n\r\n/**\r\n * @description 执行经过参数化的sql语句\r\n * @param {String} sqlExpression 包含格式化参数的原生sql语句，例：select * from tableA where Id = '@Id'\r\n * @param {Object} parameters 参数对象，其property必须与sql语句中的参数一致，例：{Id:'1'}\r\n * @returns 返回一个Promise。值为执行sql语句的结果。\r\n */\r\nfunction runParameterizedSql (sqlExpression: string, parameters: any): any {\r\n   return runSql(getParameterizedSqlExpression(sqlExpression, parameters))\r\n}\r\n\r\nexport {\r\n   connect,\r\n   createDbSchema,\r\n   createDb,\r\n   createTable,\r\n   runSql,\r\n   getParameterizedSqlExpression,\r\n   runParameterizedSql,\r\n   insert,\r\n   update,\r\n   remove,\r\n   select,\r\n   paging\r\n}\r\n"],"sourceRoot":""}